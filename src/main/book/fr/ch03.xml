<?xml version="1.0" encoding="UTF-8"?>
<chapter lang="fr" version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
	<title><application>Jenkins</application> and <application>TestLink</application> Integration</title>
	
	<para>It is important to explain how is the dynamic behind the integration 
	between <application>Jenkins</application> and <application>TestLink</application>. 
	First let's review some important facts	of both tools.</para>
	
	<para><application>Jenkins</application> is extremely easy to use and can handle 
	<emphasis>executing multiple jobs</emphasis>, <emphasis>scheduling jobs</emphasis> 
	as well as <emphasis>distributed executions</emphasis> (or everything 
	together: <emphasis>multiple jobs scheduled in a distributed environment</emphasis>).</para>
	
	<para><application>TestLink</application> is very powerful to manage tests, be it 
	<emphasis>automated</emphasis> or <emphasis>manual</emphasis>. 
	It also allows you to organize your tests in a nice hierarchical 
	structure. However, for its programming language and architecture, 
	<application>TestLink</application> is not well suitable for running or scheduling 
	multiple tasks in background.</para>
	
	<para>There are different ways to automate your tests in <application>TestLink</application>. 
	You could store your tests in <application>SVN</application> and trigger the execution from a button 
	in <application>TestLink</application>, however you would have to either implement some mechanism 
	in <application>TestLink</application> to monitor this execution or go to a different system to see 
	what is going on. Or you could write your tests in <acronym>PHP</acronym> and put them 
	together with your <application>TestLink</application> installation, but it is not an easy task 
	execute some tasks in different processes or threads in <acronym>PHP</acronym>. For all these 
	reasons, the integration that we bring to you in this guide uses simpler 
	approach. Your automated and manual tests are managed in <application>TestLink</application>, while 
	<application>Jenkins</application> is responsible for executing your automated tests. Jenkins is 
	also responsible for updating your test execution status back in <application>TestLink</application> as 
	well as uploading any attachments defined by you. This integration is 
	achieved with <application>Jenkins TestLink Plugin</application>.</para>
	
	<para>We will see how to configure our environment for this integration 
	throughout the next chapters. While it is good to have a good written 
	explanation on how this integration works, probably it is a lot easier 
	to understand how it works with a hands-on. The rest of this guide 
	explain how to configure <application>Jenkins</application> and 
	<application>TestLink</application> to run automated tests from 
	a sample test project. This test project is a Java project that uses 
	<application>Maven</application> and <application>TestNG</application>, you 
	can download it from 
	<ulink url="https://github.com/tupilabs/jenkins-testlink-plugin-tutorial">
	https://github.com/tupilabs/jenkins-testlink-plugin-tutorial</ulink>.</para>
	
	<para><application>Jenkins TestLink Plug-in</application> is licensed under the 
	<acronym>MIT</acronym> License and its 
	code is stored in github - <db:link xlink:href="http://github.com/jenkinsci/testlink-plugin">http://github.com/jenkinsci/testlink-plugin</db:link>.</para>
	
</chapter>